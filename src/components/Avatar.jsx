/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/model.glb 
*/

import React, { useEffect, useRef } from "react";
import { useFrame, useGraph } from "@react-three/fiber";
import { useFBX, useGLTF, useAnimations } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import { useControls } from "leva";
import * as THREE from "three";

export function Avatar(props) {
  
  const { animation, wireframe } = props;
  const { headFollow, cursorFollow} = useControls({
    headFollow: false,
    cursorFollow: false,
    wireframe: false,
  });

  const group = useRef();
  const { scene } = useGLTF("/models/model.glb");

  const { animations: typingAnimation } = useFBX("/animations/Typing.fbx");
  const { animations: standingAnimation } = useFBX("/animations/Standing.fbx");
  const { animations: fallingAnimation } = useFBX("/animations/Falling.fbx");

  typingAnimation[0].name = "Typing";
  standingAnimation[0].name = "Standing";
  fallingAnimation[0].name = "Falling";

  const { actions } = useAnimations(
    [typingAnimation[0], standingAnimation[0], fallingAnimation[0]],
    group
  );

  useFrame((state) => {
    if (headFollow) {
      group.current.getObjectByName("Head").lookAt(state.camera.position);
    }
    if (cursorFollow) {
      const target = new THREE.Vector3(state.mouse.x, state.mouse.y, 1);
      group.current.getObjectByName("Spine2").lookAt(target);
    }
  });

  useEffect(() => {
    if (!actions || !actions[animation]) return;
  
    const nextAction = actions[animation];
    const currentAction = Object.values(actions).find((action) => action.isRunning());
  
    if (currentAction && currentAction !== nextAction) {

      currentAction.crossFadeTo(nextAction, 1.5, true); 
    }
  
    nextAction.enabled = true; 
    nextAction.setEffectiveWeight(1); 
    nextAction.play(); 
  }, [animation, actions]);
  
  useEffect(() => {
    Object.values(materials).forEach((material) => {
      material.wireframe = wireframe;
    });
  }, [wireframe]);

  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);
  return (
    <group {...props} ref={group} dispose={null}>
      <group rotation-x={-Math.PI / 2}>
        <primitive object={nodes.Hips} />
        <skinnedMesh
          frustumCulled={false}
          geometry={nodes.Body_Mesh.geometry}
          material={materials.Body}
          skeleton={nodes.Body_Mesh.skeleton}
        />
        <skinnedMesh
          frustumCulled={false}
          geometry={nodes.avaturn_look_0.geometry}
          material={materials.avaturn_look_0_material}
          skeleton={nodes.avaturn_look_0.skeleton}
        />
        <skinnedMesh
          frustumCulled={false}
          geometry={nodes.avaturn_shoes_0.geometry}
          material={materials.avaturn_shoes_0_material}
          skeleton={nodes.avaturn_shoes_0.skeleton}
        />
        <skinnedMesh
          frustumCulled={false}
          name="Eye_Mesh"
          geometry={nodes.Eye_Mesh.geometry}
          material={materials.Eyes}
          skeleton={nodes.Eye_Mesh.skeleton}
          morphTargetDictionary={nodes.Eye_Mesh.morphTargetDictionary}
          morphTargetInfluences={nodes.Eye_Mesh.morphTargetInfluences}
        />
        <skinnedMesh
          frustumCulled={false}
          name="EyeAO_Mesh"
          geometry={nodes.EyeAO_Mesh.geometry}
          material={materials.EyeAO}
          skeleton={nodes.EyeAO_Mesh.skeleton}
          morphTargetDictionary={nodes.EyeAO_Mesh.morphTargetDictionary}
          morphTargetInfluences={nodes.EyeAO_Mesh.morphTargetInfluences}
        />
        <skinnedMesh
          frustumCulled={false}
          name="Eyelash_Mesh"
          geometry={nodes.Eyelash_Mesh.geometry}
          material={materials.Eyelash}
          skeleton={nodes.Eyelash_Mesh.skeleton}
          morphTargetDictionary={nodes.Eyelash_Mesh.morphTargetDictionary}
          morphTargetInfluences={nodes.Eyelash_Mesh.morphTargetInfluences}
        />
        <skinnedMesh
          frustumCulled={false}
          name="Head_Mesh"
          geometry={nodes.Head_Mesh.geometry}
          material={materials.Head}
          skeleton={nodes.Head_Mesh.skeleton}
          morphTargetDictionary={nodes.Head_Mesh.morphTargetDictionary}
          morphTargetInfluences={nodes.Head_Mesh.morphTargetInfluences}
        />
        <skinnedMesh
          frustumCulled={false}
          name="Teeth_Mesh"
          geometry={nodes.Teeth_Mesh.geometry}
          material={materials.Teeth}
          skeleton={nodes.Teeth_Mesh.skeleton}
          morphTargetDictionary={nodes.Teeth_Mesh.morphTargetDictionary}
          morphTargetInfluences={nodes.Teeth_Mesh.morphTargetInfluences}
        />
        <skinnedMesh
          frustumCulled={false}
          name="Tongue_Mesh"
          geometry={nodes.Tongue_Mesh.geometry}
          material={materials.Teeth}
          skeleton={nodes.Tongue_Mesh.skeleton}
          morphTargetDictionary={nodes.Tongue_Mesh.morphTargetDictionary}
          morphTargetInfluences={nodes.Tongue_Mesh.morphTargetInfluences}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/models/model.glb");
useFBX.preload("/animations/Typing.fbx");
useFBX.preload("/animations/Falling.fbx");
useFBX.preload("/animations/Standing.fbx");
